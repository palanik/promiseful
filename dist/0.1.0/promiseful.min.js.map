{"version":3,"file":"promiseful.min.js","sources":["../../src/utils/collection.js","../../src/utils/internal.js","../../src/promiseful.js"],"sourcesContent":["export default class Collection {\n  static chunk(array, n) {\n    if (n <= 0 || n >= array.length) {\n      return [array];\n    }\n\n    const ret = [];\n    for (let i = 0; i < array.length; i += n) {\n      ret.push(array.slice(i, i + n));\n    }\n\n    return ret;\n  }\n\n  static flatten(arrays) {\n    return [].concat(...arrays);\n  }\n}\n","export default class internal {\n  static fulfil(val) {\n    if (typeof val === 'function') {\n      return val;\n    }\n\n    // Is this a Promise?\n    if (typeof val === 'object'\n      && val.then\n      && typeof val.then === 'function') {\n      return () => val;\n    }\n\n    // Anything else, wrap into a promise into a function\n    return () => Promise.resolve(val);\n  }\n}\n","import utils from './utils/index';\n\nexport default class Promiseful {\n\n  static parallel(funcs) {\n    return Promiseful.all(funcs);\n  }\n\n  static parallelLimit(funcs, limit) {\n    if (limit <= funcs.length) {\n      return Promiseful.parallel(funcs);\n    }\n\n    const funcsList = utils.collection.chunk(funcs, limit)\n      .map(c => (() => Promiseful.parallel(c)));\n\n    return Promiseful.series(funcsList)\n      .then(utils.collection.flatten);\n  }\n\n  static all(funcs) {\n    return Promise.all(funcs.map(a => utils.internal.fulfil(a)).map(a => a()));\n  }\n\n  static race(funcs) {\n    if (funcs.length < 1) {\n      return Promise.resolve(null);\n    }\n\n    return Promise.race(funcs.map(a => utils.internal.fulfil(a)).map(a => a()));\n  }\n\n  static series(funcs) {\n    return new Promise((resolve, reject) => {\n      function next(idx, acc) {\n        if (idx >= funcs.length) {\n          resolve(acc);\n          return;\n        }\n\n        const p = utils.internal.fulfil(funcs[idx])();\n        p.then(\n          (val) => {\n            acc.push(val);\n            next(idx + 1, acc);\n          }                     // eslint-disable-line comma-dangle\n        )\n        .catch(reject);\n      }\n\n      next(0, []);\n    });\n  }\n}\n"],"names":["Collection","array","n","length","ret","i","push","slice","arrays","concat","internal","val","then","Promise","resolve","funcs","Promiseful","all","limit","parallel","funcsList","utils","collection","chunk","map","c","series","flatten","fulfil","a","race","reject","next","idx","acc","catch"],"mappings":"m1BAAqBA,iFACNC,EAAOC,MACdA,GAAK,GAAKA,GAAKD,EAAME,cACfF,OAIL,GADCG,MACGC,EAAI,EAAGA,EAAIJ,EAAME,OAAQE,GAAKH,IACjCI,KAAKL,EAAMM,MAAMF,EAAGA,EAAIH,UAGvBE,mCAGMI,sBACHC,iBAAUD,aCfHE,kFACLC,SACO,kBAARA,GACFA,EAIU,qBAARA,gBAAAA,KACNA,EAAIC,MACgB,kBAAbD,GAAIC,KACP,iBAAMD,IAIR,iBAAME,SAAQC,QAAQH,kICVfI,SACPC,GAAWC,IAAIF,yCAGHA,EAAOG,MACtBA,GAASH,EAAMZ,aACVa,GAAWG,SAASJ,MAGvBK,GAAYC,EAAMC,WAAWC,MAAMR,EAAOG,GAC7CM,IAAI,kBAAM,kBAAMR,GAAWG,SAASM,YAEhCT,GAAWU,OAAON,GACtBR,KAAKS,EAAMC,WAAWK,qCAGhBZ,SACFF,SAAQI,IAAIF,EAAMS,IAAI,kBAAKH,GAAMX,SAASkB,OAAOC,KAAIL,IAAI,kBAAKK,qCAG3Dd,SACNA,GAAMZ,OAAS,EACVU,QAAQC,QAAQ,MAGlBD,QAAQiB,KAAKf,EAAMS,IAAI,kBAAKH,GAAMX,SAASkB,OAAOC,KAAIL,IAAI,kBAAKK,uCAG1Dd,SACL,IAAIF,SAAQ,SAACC,EAASiB,WAClBC,GAAKC,EAAKC,MACbD,GAAOlB,EAAMZ,qBACP+B,EAIAb,GAAMX,SAASkB,OAAOb,EAAMkB,MACpCrB,KACA,SAACD,KACKL,KAAKK,KACJsB,EAAM,EAAGC,KAGjBC,MAAMJ,KAGJ"}